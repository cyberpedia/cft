# docker-compose.yml
#version: '3.8'

services:
  db:
    image: postgres:15-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    expose:
      - "5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    expose:
      - "6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  backend:
    build:
      context: .
      dockerfile: backend.Dockerfile
    volumes:
      - ./ctf_platform:/app/ctf_platform
      - ./api:/app/api
      - ./manage.py:/app/manage.py
      - ./requirements.txt:/app/requirements.txt
      - ./media:/app/media
      - ./staticfiles:/app/staticfiles # Volume for collected static files
    environment:
      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY}
      DJANGO_DEBUG: ${DJANGO_DEBUG}
      DJANGO_ALLOWED_HOSTS: ${DJANGO_ALLOWED_HOSTS}
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
      REDIS_URL: redis://redis:6379/1
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      sh -c "python manage.py makemigrations &&
             python manage.py migrate --noinput &&
             python manage.py collectstatic --noinput &&
             daphne -b 0.0.0.0 -p 8000 ctf_platform.asgi:application"
    expose:
      - "8000"

  frontend:
    build:
      context: .
      dockerfile: frontend.Dockerfile
    volumes:
      # Mount the frontend source code for development, but for production,
      # the build stage in Dockerfile handles copying compiled assets.
      # No need to mount frontend/ here if built within Dockerfile and served by Nginx.
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./frontend/src:/usr/share/nginx/html/src:ro # For dev, optional for prod unless hot-reloading
      - ./frontend/public:/usr/share/nginx/html/public:ro # For dev, optional for prod
    depends_on:
      - backend
    ports:
      - "8080:80" # Map host port 8080 to container port 80 (Nginx)

volumes:
  postgres_data:
  redis_data:
